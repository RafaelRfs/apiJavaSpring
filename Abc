package com.siteapp.api.posts.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.siteapp.api.posts.domain.Assets;
import com.siteapp.api.posts.dto.DataFileImage;
import com.siteapp.api.posts.dto.ImagePdfDto;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import javax.servlet.http.HttpServletResponse;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Collections;

@Slf4j
@RestController
@RequestMapping(Assets.PDF_COMPLETE_ROUTE)
public class PdfController {

    @PostMapping ( produces = MediaType.APPLICATION_PDF_VALUE)
    @ResponseBody
    public void getObject(ImagePdfDto dataPdf, HttpServletResponse response){
        try {
            DataFileImage fileData = (new ObjectMapper()).readValue(dataPdf.getDataJson(), DataFileImage.class);
            Document document = new Document();
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(60);
            table.setWidths(new int[] {1,3,3});
            Font headfont = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
            PdfPCell hcell = new PdfPCell(new Phrase("Id", headfont));
            hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(hcell);
            hcell = new PdfPCell(new Phrase("Name",headfont));
            hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(hcell);
            hcell = new PdfPCell(new Phrase("Descrição", headfont));
            hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(hcell);
            PdfPCell cell = new PdfPCell(new Phrase(fileData.getIdImage().toString()));
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(fileData.getName()));
            cell.setPaddingLeft(5);
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(fileData.getDescription()));
            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
            cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell.setPaddingRight(5);
            table.addCell(cell);
            PdfWriter.getInstance(document, response.getOutputStream());
            document.open();
            document.add(table);
            File file = new File("teste.jpg");
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            fileOutputStream.write(dataPdf.getObject().getBytes());
            fileOutputStream.close();
            Image image = Image.getInstance(file.getPath());
            image.setWidthPercentage(50.00f);
            image.setRotation(20);
            image.setAlt("ALguma imagem louca");
            document.add(image);
            document.close();
            file.delete();
            ByteArrayInputStream byteinputStream =  new ByteArrayInputStream(out.toByteArray());
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.valueOf("application/pdf"));
            headers.put("Content-Disposition", Collections.singletonList("attachment; filename=somefile.pdf"));
            response.setContentType("application/pdf");
            String headerKey = "Content-Disposition";
            String headerValue = "attachment; filename=algo.pdf";
            response.setHeader(headerKey, headerValue);
        }
        catch (DocumentException doc){
            log.error("error doc",doc.getMessage(),doc);
        }
        catch(JsonProcessingException js){
            log.error("error, js",js.getMessage(), js);
        }
        catch (Exception e){
            log.error("Error generico >> ", e.getMessage(), e);
        }
    }
}
© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
